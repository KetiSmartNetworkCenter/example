# mqtt.test.device.profile.yml
name: "python.Test.Device.MQTT.Profile"
manufacturer: "iot"
model: "MQTT-DEVICE"
description: "Test device profile"
labels:
  - "mqtt"
  - "test"
deviceResources:
  -
    name: distance
    description: "this is distance value"
    properties:
      value:
        { type: "FLOAT64", size: "4", readWrite: "R", floatEncoding: "eNotation"  }
      units:
        { type: "String", readWrite: "R", defaultValue: "" }
  -
    name: temperature
    description: "this is temperature value"
    properties:
      value:
        { type: "FLOAT64", size: "4", readWrite: "R", floatEncoding: "eNotation"  }
      units:
        { type: "String", readWrite: "R", defaultValue: "" }
  -
    name: humidity
    description: "this is humidity value"
    properties:
      value:
        { type: "FLOAT64", size: "4", readWrite: "R", floatEncoding: "eNotation"  }
      units:
        { type: "String", readWrite: "R", defaultValue: "" }
  -
    name: PytorchVal
    description: "this is PytorchVal value"
    properties:
      value:
        { type: "FLOAT64", size: "4", readWrite: "R", floatEncoding: "eNotation"  }
      units:
        { type: "String", readWrite: "R", defaultValue: "" }
  -
    name: TensorflowVal
    description: "this is TensorflowVal value"
    properties:
      value:
        { type: "FLOAT64", size: "4", readWrite: "R", floatEncoding: "eNotation"  }
      units:
        { type: "String", readWrite: "R", defaultValue: "" }

deviceCommands:
  -
    name: distance
    get:
    - { index: "1", operation: "get", object: "distance", parameter: "distance" }
  -
    name: temperature
    get:
    - { index: "1", operation: "get", object: "temperature", parameter: "temperature" }
  -
    name: humidity
    get:
    - { index: "1", operation: "get", object: "humidity", parameter: "humidity" }
  -
    name: PytorchVal
    get:
    - { index: "1", operation: "get", object: "PytorchVal", parameter: "PytorchVal" }
  -
    name: TensorflowVal
    get:
    - { index: "1", operation: "get", object: "TensorflowVal", parameter: "TensorflowVal" }

coreCommands:
  -
    name: distance
    get:
      path: "/api/v1/device/{deviceId}/distance"
      responses:
      -
        code: "200"
        description: "get the distance value"
        expectedValues: ["distance"]
      -
        code: "503"
        description: "service unavailable"
        expectedValues: []
  -
    name: temperature
    get:
      path: "/api/v1/device/{deviceId}/temperature"
      responses:
      -
        code: "200"
        description: "get the temperature value"
        expectedValues: ["temperature"]
      -
        code: "503"
        description: "service unavailable"
        expectedValues: []
  -
    name: humidity
    get:
      path: "/api/v1/device/{deviceId}/humidity"
      responses:
      -
        code: "200"
        description: "get the distance value"
        expectedValues: ["humidity"]
      -
        code: "503"
        description: "service unavailable"
        expectedValues: []
  -
    name: PytorchVal
    get:
      path: "/api/v1/device/{deviceId}/PytorchVal"
      responses:
      -
        code: "200"
        description: "get the distance value"
        expectedValues: ["PytorchVal"]
      -
        code: "503"
        description: "service unavailable"
        expectedValues: []
  -
    name: TensorflowVal
    get:
      path: "/api/v1/device/{deviceId}/TensorflowVal"
      responses:
      -
        code: "200"
        description: "get the distance value"
        expectedValues: ["TensorflowVal"]
      -
        code: "503"
        description: "service unavailable"
        expectedValues: []